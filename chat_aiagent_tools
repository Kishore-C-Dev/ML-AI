import os
import json
from dotenv import load_dotenv
from openai import OpenAI
import gradio as gr
import requests

load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')
openai = OpenAI()
gpt_model = "gpt-4o-mini"
gpt_system = "You are a helpful assistant to get ticket prices for different cities. \
You should provide the ticket price for the destination city. For example, \
if the customer says 'How much is a ticket to this city', you could reply something like, 'The ticket price to Paris is $899."

ticket_prices = {"london": "$799", "paris": "$899", "tokyo": "$1400", "berlin": "$499"}

def get_ticket_price(destination_city):
    print(f"Tool get_ticket_price called for {destination_city}")
    city = destination_city.lower()
    return ticket_prices.get(city, "Unknown")

#There's a specific dictionary structure that's required to describe our function:

price_function = {
    "name": "get_ticket_price",
    "description": "Get the price of a return ticket to the destination city. Call this whenever you need to know the ticket price, for example when a customer asks 'How much is a ticket to this city'",
    "parameters": {
        "type": "object",
        "properties": {
            "destination_city": {
                "type": "string",
                "description": "The city that the customer wants to travel to",
            },
        },
        "required": ["destination_city"],
        "additionalProperties": False
    }
}

tools = [{"type": "function", "function": price_function}]


def chat(message, history):

    relevant_system_message = gpt_system
    messages = [{"role": "system", "content": relevant_system_message}] + history + [{"role": "user", "content": message}]
    response = openai.chat.completions.create(model=gpt_model, messages=messages, tools=tools)
    if response.choices[0].finish_reason=="tool_calls":
        message = response.choices[0].message
        response, city = handle_tool_call(message)
        messages.append(message)
        messages.append(response)
        response = openai.chat.completions.create(model=gpt_model, messages=messages)
    
    return response.choices[0].message.content

def handle_tool_call(message):
    print(f"Tool call received {message}")
    tool_call = message.tool_calls[0]
    arguments = json.loads(tool_call.function.arguments)
    city = arguments.get('destination_city')
    print(f"Arguments are {arguments}")
    price = get_ticket_price(city)
    response = {
        "role": "tool",
        "content": json.dumps({"destination_city": city,"price": price}),
        "tool_call_id": tool_call.id
    }
    return response, city


gr.ChatInterface(fn=chat, type="messages").launch()

    

