import os
import glob
import gradio as gr

from dotenv import load_dotenv
from openai import OpenAI

from langchain.document_loaders import DirectoryLoader, TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain.schema import Document
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_chroma import Chroma
from langchain.embeddings import HuggingFaceEmbeddings
import numpy as np
from sklearn.manifold import TSNE
import plotly.graph_objects as go
from huggingface_hub import login
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain import PromptTemplate
from langchain_core.callbacks import StdOutCallbackHandler
from sentence_transformers import SentenceTransformer, util




MODEL = "gpt-4o-mini"
db_name = "vector_db"
hf_db_name = "hf_vector_db"



override=True
openai_api_key = os.getenv('OPENAI_API_KEY')
hf_token = os.getenv('HF_TOKEN')
openai = OpenAI()

login(token=hf_token)

folders = glob.glob("knowledge-base/*")

text_loader_kwargs = {'encoding': 'utf-8'}

documents = []
for folder in folders:
    doc_type = os.path.basename(folder)
    loader = DirectoryLoader(folder, glob="**/*.md", loader_cls=TextLoader, loader_kwargs=text_loader_kwargs)
    folder_docs = loader.load()
    for doc in folder_docs:
        doc.metadata["doc_type"] = doc_type
        documents.append(doc)
len(documents)
#print(documents[0].page_content)

text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = text_splitter.split_documents(documents)

doc_types = set(chunk.metadata['doc_type'] for chunk in chunks)
#print(f"Document types found: {', '.join(doc_types)}")
#print(doc_types)

embeddings = OpenAIEmbeddings(api_key=openai_api_key)

hf_embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

if os.path.exists(db_name):
    Chroma(persist_directory=db_name, embedding_function=embeddings).delete_collection()

if os.path.exists(hf_db_name):
    Chroma(persist_directory=hf_db_name, embedding_function=hf_embeddings).delete_collection()

chroma = Chroma(embedding_function=embeddings)

hf_chroma = Chroma(embedding_function=hf_embeddings)

#vectorstore = Chroma.from_documents(documents=chunks, embedding=embeddings, persist_directory=db_name)
#print(f"Vectorstore created with {vectorstore._collection.count()} documents")

hf_vectorstore = Chroma.from_documents(documents=chunks, embedding=hf_embeddings, persist_directory=hf_db_name)
print(f"HF Vectorstore created with {hf_vectorstore._collection.count()} documents")


"""collection = vectorstore._collection
#print(type(collection))
#print(collection.get(limit=1, include=["embeddings"])["embeddings"][0].shape)
sample_embedding = collection.get(limit=1, include=["embeddings"])["embeddings"][0]
dimensions = len(sample_embedding)
print(f"The OpenAI vectors have {dimensions:,} dimensions")"""

hf_collection = hf_vectorstore._collection
#print(type(hf_collection))
#print(hf_collection.get(limit=1, include=["embeddings"])["embeddings"][0].shape)
hf_sample_embedding = hf_collection.get(limit=1, include=["embeddings"])["embeddings"][0]
hf_dimensions = len(hf_sample_embedding)
print(f"The HF vectors have {hf_dimensions:,} dimensions")

result = hf_collection.get(include=['embeddings', 'documents', 'metadatas'])
vectors = np.array(result['embeddings'])
documents = result['documents']
doc_types = [metadata['doc_type'] for metadata in result['metadatas']]
colors = [['blue', 'green', 'red', 'orange'][['products', 'employees', 'contracts', 'company'].index(t)] for t in doc_types]

"""tsne = TSNE(n_components=2, random_state=42)
reduced_vectors = tsne.fit_transform(vectors)

# Create the 2D scatter plot
fig = go.Figure(data=[go.Scatter(
    x=reduced_vectors[:, 0],
    y=reduced_vectors[:, 1],
    mode='markers',
    marker=dict(size=5, color=colors, opacity=0.8),
    text=[f"Type: {t}<br>Text: {d[:100]}..." for t, d in zip(doc_types, documents)],
    hoverinfo='text'
)])

fig.update_layout(
    title='2D Chroma Vector Store Visualization',
    scene=dict(xaxis_title='x',yaxis_title='y'),
    width=800,
    height=600,
    margin=dict(r=20, b=10, l=10, t=40)
)

fig.show() 


tsne = TSNE(n_components=3, random_state=42)
reduced_vectors = tsne.fit_transform(vectors)

# Create the 3D scatter plot
fig = go.Figure(data=[go.Scatter3d(
    x=reduced_vectors[:, 0],
    y=reduced_vectors[:, 1],
    z=reduced_vectors[:, 2],
    mode='markers',
    marker=dict(size=5, color=colors, opacity=0.8),
    text=[f"Type: {t}<br>Text: {d[:100]}..." for t, d in zip(doc_types, documents)],
    hoverinfo='text'
)])

fig.update_layout(
    title='3D Chroma Vector Store Visualization',
    scene=dict(xaxis_title='x', yaxis_title='y', zaxis_title='z'),
    width=900,
    height=700,
    margin=dict(r=20, b=10, l=10, t=40)
)

fig.show() """

prompt_template = """If the context is not relevant, 
        please answer the question by using your own knowledge about the topic
        
        {context}
        
        Question: {question}
        """

PROMPT = PromptTemplate(
            template=prompt_template, input_variables=["context", "question"]
        )



# create a new Chat with OpenAI
llm = ChatOpenAI(temperature=0.7, model_name=MODEL)

# set up the conversation memory for the chat
memory = ConversationBufferMemory(memory_key='chat_history', return_messages=True)

# the retriever is an abstraction over the VectorStore that will be used during RAG
retriever = hf_vectorstore.as_retriever(search_kwargs={"k": 25})

custom_prompt = PromptTemplate(
    template=(
        "You are a helpful assistant. If you cannot answer a question, "
        "respond to greet the user and ask for more information.\n"
        "respond with 'I'm not sure, but let me find out for you!' instead of saying 'I don't know'.\n"
        "Context: {context}\n"
        "Question: {question}\n"
        "Answer:"
    ),
    input_variables=["context","question"]
)

def evaluate_similarity(query, answer, threshold=0.5):
    # Initialize embedding model
    embedding_model = SentenceTransformer('sentence-transformers/multi-qa-mpnet-base-dot-v1')
    query_embedding = embedding_model.encode(query, convert_to_tensor=True)
    answer_embedding = embedding_model.encode(answer, convert_to_tensor=True)
    similarity = util.pytorch_cos_sim(query_embedding, answer_embedding).item()
    
    if similarity < threshold:
        print(f"Misaligned response detected! Similarity: {similarity:.2f}")
        return similarity
    else:
        print(f"Response aligned. Similarity: {similarity:.2f}")
        return similarity

class LoggingConversationalRetrievalChain(ConversationalRetrievalChain):
    def run(self, inputs):
        print("Running LoggingConversationalRetrievalChain")
        query = inputs["question"]
        answer = super().run(inputs)
        # Log or store query and answer
        print(f"Query: {query}")
        print(f"Answer: {answer}")
        similarity=evaluate_similarity(query, answer)
        print(f"Evaluating similarity: {similarity}")
        return answer

# putting it together: set up the conversation chain with the GPT 3.5 LLM, the vector store and memory
#conversation_chain = ConversationalRetrievalChain.from_llm(llm=llm, retriever=retriever, memory=memory)
#conversation_chain = ConversationalRetrievalChain.from_llm(llm=llm, retriever=retriever, memory=memory,combine_docs_chain_kwargs={"prompt": custom_prompt})
#conversation_chain = ConversationalRetrievalChain.from_llm(llm=llm, retriever=retriever, memory=memory, callbacks=[StdOutCallbackHandler()] ,combine_docs_chain_kwargs={"prompt": PROMPT})
custom_chain = LoggingConversationalRetrievalChain.from_llm(llm=llm, retriever=retriever, memory=memory)

query = "who won innovator award"
result = custom_chain.run({"question":query})
print(result)


"""
def chat(message, history):
    result = custom_chain.invoke({"question": message})
    return result["answer"]

view = gr.ChatInterface(chat).launch(inbrowser=True)
"""